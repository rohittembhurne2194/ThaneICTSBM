@model SwachBharat.CMS.Bll.ViewModels.ChildModel.Model.SBALUserLocationMapView
@{
    Layout = null;
}
<style>
    /* Always set the map height explicitly to define the size of the div
           * element that contains the map. */
    #googleMap {
        height: 100%;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #floating-panel {
        position: absolute;
        top: 0px;
        left: 5%;
        z-index: 5;
        background-color: #fff;
        padding: 5px;
        border: 1px solid #999;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
    }

    #play_id {
        left: 87%;
    }

    #myRadioGroup {
        text-align: center;
    }

    #filter1, #filter2, #filter3 {
        margin-top: 3%;
        margin-bottom: 3%;
    }

    @@media only screen and (max-width: 1240px) {
        #play_id {
            left: 74%;
        }
    }

    @@media only screen and (max-width: 991px) {
        #play_id {
            left: 72%;
        }
    }

    @@media only screen and (max-width: 600px) {
        #play_id {
            left: 70%;
        }
    }

    @@media only screen and (max-width: 500px) {
        #play_id {
            left: 68%;
        }
    }

    @@media only screen and (max-width: 400px) and (min-width:300px) {
        #play_id {
            left: 64%;
        }
    }

    /*@@media only screen and (max-width: 1044px) and (min-width:850px) {
      #play_id {
         left: 65%;
      }
    }
            @@media only screen and (max-width: 849px) and (min-width:421px) {
      #play_id {
         left: 65%;
      }
    }
            @@media only screen and (max-width: 420px) {
      #play_id {
         left: 60%;
      }
    }
              @@media only screen and (max-width: 300px) {
      #play_id {
         left: 55%;
      }
    }*/

    #floating-panel {
        margin-left: -10px;
    }

    .xdsoft_datepicker {
        display: none !important;
    }

    .xdsoft_timepicker {
        width: 170px !important;
    }

    .xdsoft_prev, .xdsoft_next {
        margin-left: 40% !important;
    }
</style>
@Styles.Render("~/Content/IndexCSS")
<fieldset>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-datetimepicker/2.5.4/jquery.datetimepicker.min.css" />
    <link href="~/Content/css/datepicker/css/datepicker.css" rel="stylesheet" />
    <link href="~/Content/Custom/timepicker.css" rel="stylesheet" />

    <div class="container " role="form">
        <div class="row">
            <div class="col col-md-12 text-center">
                <h4 style="font-weight: 700;"><span id="username" style="display:none;">@Model.userName</span> <span id="demo"></span>  <span>House Route</span> </h4>
            </div>
        </div>
        <div id="myRadioGroup">
            <spn style="font-weight: bold; font-size: 16px;">Search By :</spn>  <input type="radio" name="filter" checked="checked" value="1" style="margin-left: 1%;" /> Zone/Ward/Area

            <input type="radio" name="filter" value="2" style="margin-left: 1%;" /> Pin No
            <input type="radio" name="filter" value="3" style="margin-left: 1%;" /> Date Time

            <div id="filter1" class="desc">
                <div class="row">
                    <div class="col-md-1"></div>
                    <div class="col-md-3">
                        <div class="form-group">
                            @*@Html.HiddenFor(Model=>Model.ZoneList.ToList(), new { Value = @ViewBag.zonelist })
                                @Html.HiddenFor(Model => Model.ZoneId, new { Value = @ViewBag.ZoneId })*@
                            @Html.Label("झोन / Zone")
                            @Html.Label("Zone")
                            @*<a class="pull-right add_popup_clear" style="color:#3ab59e;text-decoration:underline!important;cursor:pointer" onclick="PopZone()"> + Add Zone </a>*@
                            <div class="input-group time">
                                @Html.DropDownListFor(model => model.ZoneId, Model.ZoneList, new { style = "font-family:Arial, FontAwesome;padding: 0px !important ;", required = "required", @class = "form-control RequiredInput validate[required] RequiredInput" })
                            </div>
                            <span class="text-danger" id="err_zone"></span>
                            <span class="help-block with-errors"></span>
                        </div>
                    </div>
                    <div class="col-md-3">

                        <div class="form-group">
                            @Html.Label("वार्ड क्रमांक / Ward No")
                            @*@Html.Label("Ward / Prabhag")*@
                            @*<a class="pull-right add_popup_clear" style="color:#3ab59e;text-decoration:underline!important;cursor:pointer" onclick="PopWard()"> + Add Ward </a>*@
                            <div class="input-group time">
                                @Html.DropDownListFor(model => model.WardNo, Model.WardList, new { style = "font-family:Arial, FontAwesome;padding: 0px !important ;", @class = "form-control RequiredInput validate[required] RequiredInput" })
                                @*@Html.ValidationMessageFor(model => model.WardNo, "", new { @class = "text-danger" })*@
                            </div>
                            <span class="text-danger" id="err_ward"></span>
                            <span class="help-block with-errors"></span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.Label("क्षेत्र / Area")
                            @Html.Label("Area")
                            @*<a class="pull-right add_popup_clear" style="color:#3ab59e;text-decoration:underline!important;cursor:pointer" onclick="PopArea()"> + Add Area </a>*@
                            <div class="input-group time">
                                @Html.DropDownListFor(model => model.AreaId, Model.AreaList, new { style = "font-family:Arial, FontAwesome;padding: 0px !important ;", @class = "form-control RequiredInput validate[required] RequiredInput" })
                                @Html.ValidationMessageFor(model => model.AreaId, "", new { @class = "text-danger" })
                            </div>
                            <span class="text-danger" id="err_area"></span>
                            <span class="help-block with-errors"></span>
                        </div>
                    </div>

                    <div class="col-md-1">
                        <div id="floating-panel" style="display:inline-flex;width:auto;background:transparent;border:none">
                            <a style="margin-top:22px;color:#fff;" class="btn btn-sm btn-success" onclick="LiquidAreaSearch()">Search</a>
                        </div>
                    </div>
                    <div class="col-sm-1">

                        <div id="floating-panel" style="display:inline-flex;width:auto;background:transparent;border:none">
                            <a style="margin-top: 22px; color: #fff;" class="btn btn-sm btn-success" onclick="Reset()">Reset</a>
                        </div>

                    </div>
                </div>
            </div>
            <div id="filter2" class="desc" style="display: none;">
                <div class="row" style="margin-top:5px">
                    <div class="col-sm-2"></div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label for="">From Pin</label>
                            <div class="input-group time">
                                <input autocomplete="off" class="form-control" id="frompin" name="frompin" placeholder="From Pin" style="font-family:Arial, FontAwesome" type="text" value=""><span class="input-group-addon"></span>
                            </div>
                            <span class="glyphicon form-control-feedback" aria-hidden="true"></span>
                            <span class="help-block with-errors"></span>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">

                            <label for="">To Pin</label>
                            <div class="input-group time">
                                <input autocomplete="off" class="form-control" id="topin" name="topin" placeholder="To Pin" style="font-family:Arial, FontAwesome" type="text" value=""><span class="input-group-addon"></span>
                            </div>

                            <span class="glyphicon form-control-feedback" aria-hidden="true"></span>
                            <span class="help-block with-errors"></span>
                        </div>
                    </div>

                    <div class="col-sm-1">

                        <div id="floating-panel" style="display:inline-flex;width:auto;background:transparent;border:none">
                            <a style="margin-top: 22px; color: #fff;" class="btn btn-sm btn-success" onclick="Search()">Search</a>
                        </div>

                    </div>
                    <div class="col-sm-1">

                        <div id="floating-panel" style="display:inline-flex;width:auto;background:transparent;border:none">
                            <a style="margin-top: 22px; color: #fff;" class="btn btn-sm btn-success" onclick="Reset()">Reset</a>
                        </div>

                    </div>
                    <div class="col-sm-4">
                        <br />
                        <h4 class="text-danger" id="err_time"></h4>

                    </div>

                </div>
            </div>
            <div id="filter3" class="desc" style="display: none;">
                <div class="row" style="margin-top:5px">
                    <div class="col-sm-2"></div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label for="">From Time</label>
                            <div class="input-group time" id="timepicker">
                                <input autocomplete="off" class="form-control jquery-date-time-picker" id="fromtime" name="fromtime" placeholder="From Time" style="font-family:Arial, FontAwesome" type="text" value=""><span class="input-group-addon"><span class="fa fa-clock-o"></span></span>
                            </div>
                            <span class="glyphicon form-control-feedback" aria-hidden="true"></span>
                            <span class="help-block with-errors"></span>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">

                            <label for="">To Time</label>
                            <div class="input-group time" id="timepickerrr">
                                <input autocomplete="off" class="form-control jquery-date-time-picker" id="totime" name="totime" placeholder="To Time" style="font-family:Arial, FontAwesome" type="text" value=""><span class="input-group-addon"><span class="fa fa-clock-o"></span></span>
                            </div>

                            <span class="glyphicon form-control-feedback" aria-hidden="true"></span>
                            <span class="help-block with-errors"></span>
                        </div>
                    </div>

                    <div class="col-sm-1">

                        <div id="floating-panel" style="display:inline-flex;width:auto;background:transparent;border:none">
                            <a style="margin-top: 22px; color: #fff;" class="btn btn-sm btn-success" onclick="SearchTime()">Search</a>
                        </div>

                    </div>
                    <div class="col-sm-1">

                        <div id="floating-panel" style="display:inline-flex;width:auto;background:transparent;border:none">
                            <a style="margin-top: 22px; color: #fff;" class="btn btn-sm btn-success" onclick="Reset()">Reset</a>
                        </div>

                    </div>
                    <div class="col-sm-4">
                        <br />
                        <h4 class="text-danger" id="err_time2"></h4>

                    </div>

                </div>
            </div>
        </div>



    </div>


    <div id="floating-panel" style="display:inline-flex;width:auto;background:transparent;border:none">
        <a style="margin-left:5px" class="btn btn-sm btn-success" href="/Liquid/LiquidAttendence/Index">Back</a>
    </div>

    <input type="hidden" value='@Request.QueryString["daId"]' id='HdnIndustries' />
    <div class="container ">
        <div class="row">

            <div class="col-12 bg-white has-shadow" id="googleMap" style="width:auto; height:600px"></div>
            <div class="col-sm-2"></div>
        </div>
    </div>

    <div class="container " style="display:none;">
        <div class="row">

            <div class="col-12 bg-white has-shadow" id="mapBoxMap" style="width:auto; height:600px"></div>

            <div id="mapBoxMenu">
                <input id="satellite-v9" type="radio" name="rtoggle" value="satellite">
                <!-- See a list of Mapbox-hosted public styles at -->
                <!-- https://docs.mapbox.com/api/maps/styles/#mapbox-styles -->
                <label for="satellite-v9">satellite</label>
                <input id="light-v10" type="radio" name="rtoggle" value="light">
                <label for="light-v10">light</label>
                <input id="dark-v10" type="radio" name="rtoggle" value="dark">
                <label for="dark-v10">dark</label>
                <input id="streets-v11" type="radio" name="rtoggle" value="streets" checked="checked">
                <label for="streets-v11">streets</label>
                <input id="outdoors-v11" type="radio" name="rtoggle" value="outdoors">
                <label for="outdoors-v11">outdoors</label>
                <div class="overlay">
                    <button type="button" id="replay">Play</button>
                    <button type="button" id="pauseAnim" style="margin-left: 92%; margin-top: -45%;" disabled>Pause</button>
                </div>
            </div>

            <div class="col-sm-2"></div>
        </div>
    </div>


    <input type="hidden" value="@ViewBag.lat" id="deflat" />
    <input type="hidden" value="@ViewBag.lang" id="deflang" />



    <script src='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet' />
    @*<script src="https://cdnjs.cloudflare.com/ajax/libs/Turf.js/0.0.124/turf.min.js" integrity="sha512-jpnZ8xGKbS7L9S6d5fk/zDVgF6OoVKLMoEliLxf24BRX+orWhxqJuUcoM+vGmOaozS9dD9ABjQZKAgjjcwTndA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>*@
    <script src="~/Content/turf/turf.min.js"></script>
    <style>
        .mapBoxMarker {
            background-image: url('../Content/images/img/marker24.png');
            background-size: cover;
            width: 35px;
            height: 50px;
            cursor: pointer;
        }

        .mapboxgl-popup {
            max-width: 200px;
        }

        .mapboxgl-popup-content {
            text-align: center;
            font-family: 'Open Sans', sans-serif;
        }

        #mapBoxMenu {
            position: absolute;
            background: #efefef;
            padding: 10px;
            font-family: 'Open Sans', sans-serif;
        }
    </style>
    <style>
        .overlay {
            position: absolute;
            top: 6px;
            left: 105%;
        }
    </style>
    <script>

        function convertFromStringToDate(responseDate) {
            var now = new Date();
            let dateComponents = responseDate.split(' ');
            if (dateComponents.length == 1) {
                let timePieces = dateComponents[0].split(":");
                now.setHours(timePieces[0]);
                now.setMinutes(timePieces[1]);
                now.setSeconds(0);
            } else if (dateComponents.length == 2) {
                let timePieces = dateComponents[0].split(":");
                let hours = timePieces[0];
                let min = timePieces[1];
                let modifier = dateComponents[1]
                if (hours === '12') {
                    hours = '00';
                }
                if (modifier === 'PM') {
                    hours = parseInt(hours, 10) + 12;
                }
                now.setHours(hours);
                now.setMinutes(min);
                now.setSeconds(0);
            }
            return now;
        }
        function myMapBox() {
            var ajaxCount = 0;

            var from = document.getElementById("frompin").value;
            var to = document.getElementById("topin").value;


            function getPopupHtml(data) {

                if (data.type == 1) {

                    if (data.HouseOwnerName == null) {
                        data.HouseOwnerName = 'Not Available';
                    }
                    if (data.OwnerMobileNo == null) {
                        data.OwnerMobileNo = '';
                    }
                    if (data.HouseAddress == null) {
                        data.HouseAddress = '';
                    }
                    if (data.vehcileNumber == null) {
                        data.vehcileNumber = '';
                    }
                    if (data.WasteType == null) {
                        data.WasteType = '';
                    }
                    else if (data.WasteType == "0") {
                        data.WasteType = "Mixed Garbage"
                    }
                    else if (data.WasteType == "1") {
                        data.WasteType = "Segregated Garbage"
                    }
                    else if (data.WasteType == "2") {
                        data.WasteType = "Garbage not Received"
                    }
                    if (data.gpBeforImage == null) {
                        data.gpBeforImage = "/Images/default_not_upload.png"
                    }
                    if (data.gpAfterImage == null) {
                        data.gpAfterImage = "/Images/default_not_upload.png"
                    }
                    if (data.HouseId != null) {
                        return '<div class=infowindow style="max-width:100%"> <h5><b>House Details:</b></h5><p><b>House-Id:</b>' + data.HouseId + '</p><p><b>Name:</b>' + data.HouseOwnerName + '</p><p><b>Mobile No:</b>' + data.OwnerMobileNo + '</p><p><b>Date:</b>' + data.date + '</p><p><b>Time:</b>' + data.time + '</p><p><b>House Address:</b>' + data.HouseAddress + '</p><p><b>Garbage type:</b>' + data.WasteType + '</p><p><b>Before Image:</b><a target="_blank" href="' + data.gpBeforImage + '"><img alt="Photo Not Found"  src=" ' + data.gpBeforImage + ' " style="height:35px;width:35px;cursor:pointer;margin-left:0px;"></img></a></p><p><b>After Image:</b><a target="_blank" href="' + data.gpAfterImage + '"><img alt="Photo Not Found"  src="' + data.gpAfterImage + '" style="height:35px;width:35px;cursor:pointer;margin-left:0px;"></img></a></p><hr><div><h5><b>Employee Details:</b></h5><p><b>Emp Name:</b><span id="emp_name" class="a">' + data.userName + '</span></p><p><b>Vehicle No:</b>' + data.vehcileNumber + '</p></div></div>';

                    }
                    else if (data.DyId != null) {
                        return '<div class=infowindow style="max-width:100%"> <h5><b>Dump Yard Details:</b></h5><p><b>DumpYard-Id:</b>' + data.DyId + '</p><p><b>Dump Yard Name:</b>' + data.DumpYardName + '</p><p><b>Date:</b>' + data.date + '</p><p><b>Time:</b>' + data.time + '</p><p><b>Dump Yard Address:</b>' + data.DumpAddress + '</p><p><b>Dry Waste Weight :</b>' + data.DryWaste + '</p><p><b>Wet Waste Weight :</b>' + data.WetWaste + '</p><p><b>Total Waste Weight :</b>' + data.TotWaste + '</p><p><b>Before Image:</b><a target="_blank" href="' + data.gpBeforImage + '"><img alt="Photo Not Found"  src=" ' + data.gpBeforImage + ' " style="height:35px;width:35px;cursor:pointer;margin-left:0px;"></img></a></p><p><b>After Image:</b><a target="_blank" href="' + data.gpAfterImage + '"><img alt="Photo Not Found"  src="' + data.gpAfterImage + '" style="height:35px;width:35px;cursor:pointer;margin-left:0px;"></img></a></p><hr><div><h5><b>Employee Details:</b></h5><p><b>Emp Name:</b>' + data.userName + '</p><p><b>Vehicle No:</b>' + data.vehcileNumber + '</p></div></div>';

                    }

                }

            }


            var defLat = $('#deflat').val();
            var defLang = $('#deflang').val();
            mapboxgl.accessToken = 'pk.eyJ1IjoibWlsaW5kd2Fua2hlZGUiLCJhIjoiY2t5OGtydmRsMWV3cjJvb3lqcGFxeW1laSJ9.PSgpPveli2BSppuhR30bcw';

            $("#mapBoxMap").css("display", "none");
            var industries = $("#HdnIndustries").val();
            var areaid = $("#AreaId").val();
            var fromtime = $("#fromtime").val()
            var totime = $("#totime").val()
            $.ajax({

                type: "post",
                url: "/Liquid/LiquidAttendence/HouseRouteData?daId=" + industries + "&areaid=" + areaid,
                datatype: "json",
                traditional: true,
                success: function (m) {
                    $("#mapBoxMap").css("display", "block");

                    markers = m;
                    if (markers.length == 0) {

                        var mapBox = new mapboxgl.Map({
                            container: 'mapBoxMap', // container ID
                            style: 'mapbox://styles/mapbox/streets-v11', // style URL
                            center: [defLang, defLat], // starting position [lng, lat]
                            zoom: 12 // starting zoom
                        });

                    } else {

                        var mapBox = new mapboxgl.Map({
                            container: 'mapBoxMap', // container ID
                            style: 'mapbox://styles/mapbox/streets-v11', // style URL
                            center: [markers[0].log, markers[0].lat], // starting position [lng, lat]
                            zoom: 12 // starting zoom
                        });



                        var col;
                        var dumpCordinates = [];
                        var temicon;
                        var fromToTimeLogLat = [];
                        for (var i = 0; i < markers.length; i++) {



                            var data = markers[i];
                            if (data.type == 1) {
                                (function (data) {
                                    if (data.WasteType == "0") {
                                        col = '|f44336|000000'
                                    }
                                    else if (data.WasteType == "1") {
                                        col = '|388e3c|000000'
                                    }
                                    else if (data.WasteType == "2") {
                                        col = '|fe9436|000000'
                                    }
                                })(data);

                                if (data.DyId != null) {
                                    var lastmarker = markers.length - 1;
                                }
                                else {
                                    var lastmarker = markers.length;
                                }
                            }



                            if (data.HouseId != null) {
                                var a = i + 1;
                                if (a == 1) {
                                    temicon = "../../Areas/Liquid/Content/images/img/segregationImg/Start-Point.png";
                                }
                                else if (a == lastmarker) {
                                    temicon = "../../Areas/Liquid/Content/images/img/segregationImg/End_Point.png";
                                }
                                else {
                                    temicon = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=' + a + col
                                }
                                if (fromtime == "" || totime == "") {
                                    if (from == "" || to == "") {
                                        const el = document.createElement('div');
                                        el.className = 'mapBoxMarker';
                                        el.style.backgroundImage = "url(" + temicon + ")";
                                        new mapboxgl.Marker(el)
                                            .setLngLat([data.log, data.lat])
                                            .setPopup(
                                                new mapboxgl.Popup({ offset: 25 }) // add popups
                                                    .setHTML(getPopupHtml(data)
                                                    )
                                            )
                                            .addTo(mapBox);

                                    }
                                    else {
                                        if (a >= from && a <= to) {
                                            const el = document.createElement('div');
                                            el.className = 'mapBoxMarker';
                                            el.style.backgroundImage = "url(" + temicon + ")";
                                            new mapboxgl.Marker(el)
                                                .setLngLat([data.log, data.lat])
                                                .setPopup(
                                                    new mapboxgl.Popup({ offset: 25 }) // add popups
                                                        .setHTML(getPopupHtml(data)
                                                        )
                                                )
                                                .addTo(mapBox);

                                        }
                                        else {
                                            const el = document.createElement('div');
                                            new mapboxgl.Marker(el)
                                                .setLngLat([data.log, data.lat])
                                                .addTo(mapBox);
                                        }
                                    }

                                } else if (fromtime != "" && totime != "") {
                                    debugger;
                                    if (convertFromStringToDate(data.datetime) >= convertFromStringToDate(fromtime) && convertFromStringToDate(data.datetime) <= convertFromStringToDate(totime)) {
                                        fromToTimeLogLat.push({ "log": data.log, "lat": data.lat });
                                        const el = document.createElement('div');
                                        el.className = 'mapBoxMarker';
                                        el.style.backgroundImage = "url(" + temicon + ")";
                                        new mapboxgl.Marker(el)
                                            .setLngLat([data.log, data.lat])
                                            .setPopup(
                                                new mapboxgl.Popup({ offset: 25 }) // add popups
                                                    .setHTML(getPopupHtml(data)
                                                    )
                                            )
                                            .addTo(mapBox);
                                    }
                                    else {
                                        const el = document.createElement('div');
                                        new mapboxgl.Marker(el)
                                            .setLngLat([data.log, data.lat])
                                            .addTo(mapBox);
                                    }

                                }
                                else {
                                    fromToTimeLogLat.push({ "log": data.log, "lat": data.lat });
                                    const el = document.createElement('div');
                                    el.className = 'mapBoxMarker';
                                    el.style.backgroundImage = "url(" + temicon + ")";
                                    new mapboxgl.Marker(el)
                                        .setLngLat([data.log, data.lat])
                                        .setPopup(
                                            new mapboxgl.Popup({ offset: 25 }) // add popups
                                                .setHTML(getPopupHtml(data)
                                                )
                                        )
                                        .addTo(mapBox);

                                }
                            }

                            //else if (data.DyId != null) {
                            //    var a = "D";
                            //    if (fromtime == "" || totime == "") {

                            //        temicon = "../Content/images/img/segregationImg/Dumpyard_marker.png";
                            //        dumpCordinates = [data.log, data.lat];
                            //        const el = document.createElement('div');
                            //        el.className = 'mapBoxMarker';
                            //        el.style.backgroundImage = "url(" + temicon + ")";
                            //        new mapboxgl.Marker(el)
                            //            .setLngLat([data.log, data.lat])
                            //            .setPopup(
                            //                new mapboxgl.Popup({ offset: 25 }) // add popups
                            //                    .setHTML(getPopupHtml(data)
                            //                    )
                            //            )
                            //            .addTo(mapBox);

                            //    }
                            //    else if (fromtime != "" && totime != "") {
                            //        debugger;
                            //        if (convertFromStringToDate(data.datetime) >= convertFromStringToDate(fromtime) && convertFromStringToDate(data.datetime) <= convertFromStringToDate(totime)) {
                            //            temicon = "../Content/images/img/segregationImg/Dumpyard_marker.png";
                            //            dumpCordinates = [data.log, data.lat];
                            //            const el = document.createElement('div');
                            //            el.className = 'mapBoxMarker';
                            //            el.style.backgroundImage = "url(" + temicon + ")";
                            //            new mapboxgl.Marker(el)
                            //                .setLngLat([data.log, data.lat])
                            //                .setPopup(
                            //                    new mapboxgl.Popup({ offset: 25 }) // add popups
                            //                        .setHTML(getPopupHtml(data)
                            //                        )
                            //                )
                            //                .addTo(mapBox);

                            //        } else {
                            //            const el = document.createElement('div');
                            //            new mapboxgl.Marker(el)
                            //                .setLngLat([data.log, data.lat])
                            //                .addTo(mapBox);
                            //        }

                            //    }
                            //    else {
                            //        temicon = "../Content/images/img/segregationImg/Dumpyard_marker.png";
                            //        dumpCordinates = [data.log, data.lat];
                            //        const el = document.createElement('div');
                            //        el.className = 'mapBoxMarker';
                            //        el.style.backgroundImage = "url(" + temicon + ")";
                            //        new mapboxgl.Marker(el)
                            //            .setLngLat([data.log, data.lat])
                            //            .setPopup(
                            //                new mapboxgl.Popup({ offset: 25 }) // add popups
                            //                    .setHTML(getPopupHtml(data)
                            //                    )
                            //            )
                            //            .addTo(mapBox);
                            //    }



                            //}





                        }
                        let counter = 0;
                        let steps = 0;
                        var pathCordinates = [];
                        var returnPathCord = [];




                        mapBox.on('load', () => {
                            mapBox.loadImage('../Content/images/img/send.png', (error, image) => {
                                if (error) throw error;
                                mapBox.addImage('rout-icon', image, { 'sdf': false, pixelRatio: 20 });
                            });

                            var origin = [];

                            debugger;
                            for (var m = 0; m < markers.length - 1; m++) {
                                var c = m + 1;
                                if (fromtime == "" || totime == "") {
                                    if (from == "" || to == "") {
                                        origin = [markers[0].log, markers[0].lat];
                                        break;
                                    }
                                    else {
                                        if (c >= from && c < to) {
                                            origin = [markers[from - 1].log, markers[from - 1].lat];
                                            break;
                                        }
                                        else {
                                            origin = [markers[0].log, markers[0].lat];
                                        }
                                    }
                                }
                                else if (fromtime != "" && totime != "") {
                                    if (fromToTimeLogLat.length > 0) {
                                        origin = [fromToTimeLogLat[0].log, fromToTimeLogLat[0].lat];
                                    }
                                    else {
                                        origin = [markers[0].log, markers[0].lat];
                                    }
                                }
                                else {
                                    origin = [markers[0].log, markers[0].lat];
                                }

                            }



                            var point = {
                                'type': 'FeatureCollection',
                                'features': [
                                    {
                                        'type': 'Feature',
                                        'properties': {},
                                        'geometry': {
                                            'type': 'Point',
                                            'coordinates': origin
                                        }
                                    }
                                ]
                            };

                            mapBox.addSource('point', {
                                'type': 'geojson',
                                'data': point
                            });





                            var k = 0;
                            var start;
                            var end
                            let interval = setInterval(function () {
                                if (ajaxCount == 0) {
                                    debugger;
                                    var b = k + 1;
                                    if (fromtime == "" || totime == "") {
                                        if (from == "" || to == "") {
                                            if (k < markers.length - 1) {
                                                start = [markers[k].log, markers[k].lat];
                                                end = [markers[k + 1].log, markers[k + 1].lat];
                                                // make an initial directions request that
                                                // starts and ends at the same location
                                                getRoute(start, end, k);
                                            }

                                        }
                                        else {
                                            if (b >= from && b < to) {
                                                if (k < markers.length - 1) {
                                                    start = [markers[k].log, markers[k].lat];
                                                    end = [markers[k + 1].log, markers[k + 1].lat];
                                                    // make an initial directions request that
                                                    // starts and ends at the same location
                                                    getRoute(start, end, k);
                                                }
                                            }
                                        }
                                    } else if (fromtime != "" && totime != "") {
                                        if (k < markers.length) {
                                            if (convertFromStringToDate(markers[k].datetime) >= convertFromStringToDate(fromtime) && convertFromStringToDate(markers[k].datetime) <= convertFromStringToDate(totime) && convertFromStringToDate(markers[k + 1].datetime) >= convertFromStringToDate(fromtime) && convertFromStringToDate(markers[k + 1].datetime) <= convertFromStringToDate(totime)) {
                                                if (k < markers.length - 1) {
                                                    start = [markers[k].log, markers[k].lat];
                                                    end = [markers[k + 1].log, markers[k + 1].lat];
                                                    // make an initial directions request that
                                                    // starts and ends at the same location
                                                    getRoute(start, end, k);
                                                }
                                            }
                                        }
                                    }


                                    debugger;
                                    if (k == markers.length - 1) {
                                        if (dumpCordinates.length > 0) {
                                            getRoute(end, dumpCordinates, k + 1);
                                        }

                                    }

                                    k++;
                                }

                                if (k >= markers.length + 1 && ajaxCount == 0) {

                                    clearInterval(interval);
                                    if (pathCordinates.length > 0) {
                                        mapBox.addLayer({
                                            'id': 'point',
                                            'source': 'point',
                                            'type': 'symbol',
                                            'layout': {


                                                'icon-image': 'rout-icon',
                                                //'icon-rotate': 90,
                                                'icon-rotate': ['get', 'bearing'],
                                                'icon-rotation-alignment': 'map',
                                                'icon-allow-overlap': true,
                                                'icon-ignore-placement': true
                                            }
                                        });
                                    }
                                    //getRoute(end, dumpCordinates, k);
                                }
                            }, 1);

                            var requestAnimateId = 0;
                            document.getElementById('replay').addEventListener('click', () => {

                                if (requestAnimateId != 0) {
                                    $('#replay').prop('disabled', true);
                                    $('#pauseAnim').prop('disabled', false);
                                    window.cancelAnimationFrame(requestAnimateId);
                                    animate();
                                } else {
                                    if (pathCordinates.length > 0) {
                                        $('#replay').prop('disabled', true);
                                        $('#pauseAnim').prop('disabled', false);
                                        // Set the coordinates of the original point back to origin
                                        point.features[0].geometry.coordinates = pathCordinates[0];

                                        // Update the source layer
                                        mapBox.getSource('point').setData(point);

                                        // Reset the counter
                                        counter = 0;

                                        // Restart the animation
                                        animate(counter);
                                    }
                                }
                            });
                            document.getElementById('pauseAnim').addEventListener('click', () => {

                                if (requestAnimateId) {
                                    $('#replay').prop('disabled', false);
                                    $('#pauseAnim').prop('disabled', true);
                                    window.cancelAnimationFrame(requestAnimateId);
                                    requestAnimateId = undefined;
                                }
                            });
                            function animate() {
                                steps = pathCordinates.length;
                                const start =
                                    pathCordinates[
                                    counter >= steps ? counter - 1 : counter
                                    ];
                                const end =
                                    pathCordinates[
                                    counter >= steps ? counter : counter + 1
                                    ];
                                if (!start || !end) {
                                    // Update point geometry to a new position based on counter denoting
                                    // the index to access the arc
                                    point.features[0].geometry.coordinates =
                                        pathCordinates[counter];

                                    $('#replay').prop('disabled', false);
                                    $('#pauseAnim').prop('disabled', true);
                                    // Update the source with this new data
                                    mapBox.getSource('point').setData(point);
                                    requestAnimateId = 0;
                                    return;
                                }


                                // Update point geometry to a new position based on counter denoting
                                // the index to access the arc
                                point.features[0].geometry.coordinates =
                                    pathCordinates[counter];

                                // Calculate the bearing to ensure the icon is rotated to match the route arc
                                // The bearing is calculated between the current point and the next point, except
                                // at the end of the arc, which uses the previous point and the current point
                                point.features[0].properties.bearing = turf.bearing(
                                    turf.point(start),
                                    turf.point(end)
                                );

                                // Update the source with this new data
                                mapBox.getSource('point').setData(point);

                                // Request the next frame of animation as long as the end has not been reached
                                if (counter < steps) {
                                    requestAnimateId = requestAnimationFrame(animate);
                                    //setTimeout(animate,1);

                                }

                                counter = counter + 1;
                            }
                        });

                        debugger;
                    }


                    const layerList = document.getElementById('mapBoxMenu');
                    const inputs = layerList.getElementsByTagName('input');

                    for (const input of inputs) {
                        input.onclick = (layer) => {
                            debugger;
                            const layerId = layer.target.id;
                            mapBox.setStyle('mapbox://styles/mapbox/' + layerId);

                        };
                    }
                    // create a function to make a directions request
                    function getRoute1(start, end, i) {
                        debugger;
                        // make a directions request using cycling profile
                        // an arbitrary start will always be the same
                        // only the end or destination will change

                        $.ajax({
                            type: "get",
                            traditional: true,
                            dataType: "json",
                            async: false,
                            url: `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?overview=full&steps=false&geometries=geojson&access_token=${mapboxgl.accessToken}`,
                            success: function (d) {
                                debugger;
                                const json = JSON.stringify(d);
                                const data = json.routes[0];
                                const route = data.geometry.coordinates;
                                const geojson = {
                                    type: 'Feature',
                                    properties: {},
                                    geometry: {
                                        type: 'LineString',
                                        coordinates: route
                                    }
                                };

                                //if the route already exists on the map, we'll reset it using setData
                                if (map.getSource('route' + i)) {
                                    map.getSource('route' + i).setData(geojson);
                                }
                                // otherwise, we'll make a new request
                                else {
                                    map.addLayer({
                                        id: 'route' + i,
                                        type: 'line',
                                        source: {
                                            type: 'geojson',
                                            data: geojson
                                        },
                                        layout: {
                                            'line-join': 'round',
                                            'line-cap': 'round'
                                        },
                                        paint: {
                                            'line-color': '#3887be',
                                            'line-width': 5,
                                            'line-opacity': 0.75
                                        }
                                    });
                                }

                                return route;
                            }
                        });
                        // add turn instructions here at the end


                    }
                    async function getRoute(start, end, i) {

                        // make a directions request using cycling profile
                        // an arbitrary start will always be the same
                        // only the end or destination will change
                        ajaxCount++;
                        const query = await fetch(
                            `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?overview=full&steps=false&geometries=geojson&access_token=${mapboxgl.accessToken}`,
                            { method: 'GET' }
                        );
                        const json = await query.json();

                        const data = json.routes[0];
                        const route = data.geometry.coordinates;

                        const geojson = {
                            type: 'Feature',
                            properties: {},
                            geometry: {
                                type: 'LineString',
                                coordinates: route
                            }
                        };
                        debugger;
                        for (var l = 0; l < route.length; l++) {
                            if (l < route.length - 1) {

                                var line = turf.lineString([route[l], route[l + 1]]);
                                var options = { units: 'kilometers' };

                                var point1 = {
                                    "type": "Feature",
                                    "properties": {},
                                    "geometry": {
                                        "type": "Point",
                                        "coordinates": route[l]
                                    }
                                };
                                var point2 = {
                                    "type": "Feature",
                                    "properties": {},
                                    "geometry": {
                                        "type": "Point",
                                        "coordinates": route[l + 1]
                                    }
                                };
                                var units = "kilometers";
                                var distanceInMeter = Math.trunc((turf.distance(point1, point2, units)) * 1000);
                                for (var n = 0; n < distanceInMeter; n = n + 15) {
                                    var along = turf.along(line, n / 1000, options);
                                    pathCordinates.push(along.geometry.coordinates);
                                }




                            } else {
                                pathCordinates.push(route[l]);
                            }
                            //pathCordinates.push(route[l]);
                            //pathCordinates.push(route[l]);
                            //pathCordinates.push(route[l]);

                        }

                        //if the route already exists on the map, we'll reset it using setData
                        if (mapBox.getSource('route' + i)) {
                            mapBox.getSource('route' + i).setData(geojson);
                        }
                        // otherwise, we'll make a new request
                        else {
                            mapBox.addLayer({
                                id: 'route' + i,
                                type: 'line',
                                source: {
                                    type: 'geojson',
                                    data: geojson
                                },
                                layout: {
                                    'line-join': 'round',
                                    'line-cap': 'round'
                                },
                                paint: {
                                    'line-color': '#3887be',
                                    'line-width': 5,
                                    'line-opacity': 0.75
                                }
                            });
                        }
                        // add turn instructions here at the end
                        ajaxCount--;

                    }


                }

            });

        }
    </script>

    <script>


        $('#ZoneId').change(function () {
            debugger;
            var selectedText = $(this).find("option:selected").text();
            var selectedValue = $(this).val();

            $.ajax({
                type: "post",
                url: "/Liquid/LiquidAttendence/LoadWardNoList?",
                data: { ZoneId: $('#ZoneId').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var ward;
                    for (var i = 0; i < data.length; i++) {
                        ward = ward + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }

                    $('#WardNo').html(ward);

                    $('#AreaId').find('option').remove().end().append('<option value="0">--Select Area--</option>');
                }
            });

        });

        $('#WardNo').change(function () {
            var selectedText = $(this).find("option:selected").text();
            var selectedValue = $(this).val();

            $.ajax({
                type: "post",
                url: "/Liquid/LiquidAttendence/LoadAreaList?",
                data: { WardNo: $('#WardNo').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var area;
                    for (var i = 0; i < data.length; i++) {
                        area = area + '<option value=' + data[i].Value + '>' + data[i].Text + '</option>';
                    }
                    $('#AreaId').html(area);
                }
            });

        });

        var from = "";
        var to = "";
        var fromtime = "";
        var totime = "";

        function Search() {
            debugger;
            var from = document.getElementById("frompin").value;
            var to = document.getElementById("topin").value;
            if (from == "" || to == "") {
                $("#err_time").html("From Pin and To Pin is required").delay(3000).show().fadeOut('slow');
                return false;
            }
            else {
                myMap(from, to)
            }


        }


        function SearchTime() {
            debugger;
            var fromtime = document.getElementById("fromtime").value;
            var totime = document.getElementById("totime").value;
            if (fromtime == "" || totime == "") {
                $("#err_time2").html("From Time and To Time is required").delay(3000).show().fadeOut('slow');
                return false;
            }
            else if (fromtime >= totime) {
                $("#err_time2").html("Please Select From Time Less Than To Time").delay(3000).show().fadeOut('slow');
                return false;
            }
            else {
                myMap(fromtime, totime)
            }


        }

        function LiquidAreaSearch() {
            debugger;
            //var from = document.getElementById("frompin").value;
            //var to = document.getElementById("topin").value;
            //if (from == "" || to == "") {
            //    $("#err_time").html("From Pin and To Pin is required").delay(3000).show().fadeOut('slow');
            //    return false;
            //}
            //else {
            myMap(from, to)
            // }


        }

        function Reset() {
            debugger;
            var from = "";
            var to = "";
            document.getElementById("frompin").value = "";
            document.getElementById("topin").value = "";
            document.getElementById("fromtime").value = "";
            document.getElementById("totime").value = "";
            document.getElementById("ZoneId").value = "0";
            document.getElementById("WardNo").value = "0";
            document.getElementById("AreaId").value = "0";
            myMap(from, to)
        }

        function myMap() {

            var from = document.getElementById("frompin").value;
            var to = document.getElementById("topin").value;
            var fromtime = document.getElementById("fromtime").value;
            var totime = document.getElementById("totime").value;

            function CenterControl(controlDiv, map) {

                // Set CSS for the control border.
                var controlUI = document.createElement('div');

                controlUI.style.cursor = 'pointer';
                controlUI.style.marginBottom = '22px';
                controlUI.style.marginTop = '5px';
                // controlUI.style.textAlign = 'center';
                controlDiv.appendChild(controlUI);

                // Set CSS for the control interior.
                var controlText = document.createElement('div');
                controlText.style.color = '#fff';
                controlText.innerHTML = 'Play';
                controlText.id = "play";
                controlText.className = 'test btn btn-sm btn-success';
                controlUI.appendChild(controlText);

                // Setup the click event listeners: simply set the map to Chicago.

            }

            function CenterControlPause(controlDivPause, map) {

                // Set CSS for the control border.
                var controlUIPause = document.createElement('div');

                controlUIPause.style.cursor = 'pointer';
                controlUIPause.style.marginBottom = '22px';
                controlUIPause.style.marginTop = '5px';
                // controlUI.style.textAlign = 'center';
                controlDivPause.appendChild(controlUIPause);

                // Set CSS for the control interior.
                var controlTextPause = document.createElement('div');
                controlTextPause.style.color = '#fff';
                controlTextPause.innerHTML = 'Pause';
                controlTextPause.id = "pause";
                controlTextPause.className = 'test btn btn-sm btn-success';
                controlUIPause.appendChild(controlTextPause);

                // Setup the click event listeners: simply set the map to Chicago.

            }


            debugger;
            var industries = $("#HdnIndustries").val();
            var areaid = $("#AreaId").val();
            var geocoder = new google.maps.Geocoder();
            $.ajax({
                type: "post",
                url: "/Liquid/LiquidAttendence/HouseRouteData?daId=" + industries + "&areaid=" + areaid,
                datatype: "json",
                traditional: true,
                success: function (m) {
                    markers = m;
                    if (markers.length == 0) {
                        var map = new google.maps.Map(document.getElementById('googleMap'), {
                            zoom: 10,
                            center: new google.maps.LatLng($('#deflat').val(), $('#deflang').val()),
                            mapTypeId: google.maps.MapTypeId.ROADMAP
                        });

                    }
                    else {
                        var mapOptions = {
                            center: new google.maps.LatLng(markers[0].lat, markers[0].log),
                            zoom: 10,
                            mapTypeId: google.maps.MapTypeId.ROADMAP
                        };
                        var map = new google.maps.Map(document.getElementById("googleMap"), mapOptions);

                        var centerControlDiv = document.createElement('div');
                        var centerControlDivPause = document.createElement('div');
                        var centerControl = new CenterControl(centerControlDiv, map);
                        var centerControlPause = new CenterControlPause(centerControlDivPause, map);

                        centerControlDiv.index = 1;
                        centerControlDivPause.index = 1;
                        //centerControlDiv.style.left = '90%';
                        centerControlDiv.id = "play_id";
                        centerControlDivPause.style.left = '80%';
                        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(centerControlDiv);
                        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(centerControlDivPause);

                        centerControlDiv.addEventListener('click', function () {
                            animateCircle(poly, 17);
                        });

                        centerControlDivPause.addEventListener('click', function () {
                            animateCircle(poly, 7);
                        });

                        var infoWindow = new google.maps.InfoWindow();
                        var lat_lng = new Array();
                        var latlngbounds = new google.maps.LatLngBounds();
                        var lastmarker = markers.length;

                        for (i = 0; i < markers.length; i++) {



                            var data = markers[i]
                            debugger;
                            if (data.type == 1) {
                                (function (marker, data) {
                                    if (data.WasteType == "4") {
                                        col = '|0F7017|FFFFFF'
                                    }
                                })(marker, data);
                            }
                            if (data.HouseId != null) {
                                var a = i + 1;
                                if (a == 1) {
                                    temicon = "../../Areas/Liquid/Content/images/img/segregationImg/Start-Point.png";
                                }
                                else if (a == lastmarker) {
                                    temicon = "../../Areas/Liquid/Content/images/img/segregationImg/End_Point.png";
                                }
                                else {
                                    temicon = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=' + a + col
                                }
                                if (fromtime == "" && totime == "") {


                                    if (from == "" && to == "") {
                                        // Get Address from server
                                        var myLatlng = new google.maps.LatLng(data.lat, data.log);
                                        lat_lng.push(myLatlng);
                                        var marker = new google.maps.Marker({
                                            position: myLatlng,
                                            map: map,
                                            title: data.Username,
                                            icon: {
                                                // labelOrigin: new google.maps.Point(16, 65),
                                                url: temicon
                                            }
                                        });
                                    }
                                    else {
                                        if (a >= from && a <= to) {
                                            // Get Address from server
                                            var myLatlng = new google.maps.LatLng(data.lat, data.log);
                                            lat_lng.push(myLatlng);
                                            var marker = new google.maps.Marker({
                                                position: myLatlng,
                                                map: map,
                                                title: data.Username,
                                                icon: {
                                                    // labelOrigin: new google.maps.Point(16, 65),
                                                    url: temicon
                                                }
                                            });
                                        }
                                        else {
                                            var myLatlng = new google.maps.LatLng(data.lat, data.log);
                                            //lat_lng.push(myLatlng);
                                            var marker = new google.maps.Marker({
                                                position: myLatlng
                                            });
                                        }
                                    }
                                }
                                else if (fromtime != "" && totime != "") {
                                    if (data.datetime >= fromtime && data.datetime <= totime) {
                                        // Get Address from server
                                        var myLatlng = new google.maps.LatLng(data.lat, data.log);
                                        lat_lng.push(myLatlng);
                                        var marker = new google.maps.Marker({
                                            position: myLatlng,
                                            map: map,
                                            title: data.Username,
                                            icon: {
                                                // labelOrigin: new google.maps.Point(16, 65),
                                                url: temicon
                                            }
                                        });
                                    }
                                    else {
                                        var myLatlng = new google.maps.LatLng(data.lat, data.log);
                                        //lat_lng.push(myLatlng);
                                        var marker = new google.maps.Marker({
                                            position: myLatlng
                                        });
                                    }
                                }
                                else {
                                    // Get Address from server
                                    var myLatlng = new google.maps.LatLng(data.lat, data.log);
                                    lat_lng.push(myLatlng);
                                    var marker = new google.maps.Marker({
                                        position: myLatlng,
                                        map: map,
                                        title: data.Username,
                                        icon: {
                                            // labelOrigin: new google.maps.Point(16, 65),
                                            url: temicon
                                        }
                                    });
                                }


                            }
                            //else if (data.DyId != null) {
                            //    var a = "D";
                            //    // Get Address from server
                            //    var myLatlng = new google.maps.LatLng(data.lat, data.log);
                            //    lat_lng.push(myLatlng);
                            //    var mUrl = "../../Areas/Liquid/Content/images/img/segregationImg/Liquidwaste_Marker.png";
                            //    var marker = new google.maps.Marker({
                            //        position: myLatlng,
                            //        map: map,
                            //        title: data.Username,

                            //        /* icon: 'https://chart.googleapis.com/chart?chst=d_simple_text_icon_left&chld=|16|000|truck|24|FFF|000'*/
                            //        /* icon: 'https://chart.googleapis.com/chart?chst=d_simple_text_icon_left&chld=|14|000|glyphish_house|16|000|FFF'*/
                            //        /* icon: '-/Content/Images/Icon/dump.jpg'*/
                            //        icon: {
                            //            // labelOrigin: new google.maps.Point(16, 65),
                            //            url: mUrl
                            //        }
                            //    });
                            //}

                            //var a = i + 1;
                            //// Get Address from server
                            //var myLatlng = new google.maps.LatLng(data.lat, data.log);
                            //lat_lng.push(myLatlng);
                            //var marker = new google.maps.Marker({
                            //    position: myLatlng,
                            //    map: map,
                            //    title: data.Username,
                            //    icon: 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=' + a + '|0F7017|FFFFFF'
                            //});


                            latlngbounds.extend(marker.position);


                            if (data.type == 1) {

                                (function (marker, data) {
                                    if (data.HouseOwnerName == null) {
                                        data.HouseOwnerName = 'Not Available';
                                    }
                                    if (data.OwnerMobileNo == null) {
                                        data.OwnerMobileNo = '';
                                    }
                                    if (data.HouseAddress == null) {
                                        data.HouseAddress = '';
                                    }
                                    if (data.vehcileNumber == null) {
                                        data.vehcileNumber = '';
                                    }
                                    if (data.gpBeforImage == null) {
                                        data.gpBeforImage = "/Images/default_not_upload.png"
                                    }
                                    if (data.gpAfterImage == null) {
                                        data.gpAfterImage = "/Images/default_not_upload.png"
                                    }
                                    if (data.HouseId != null) {
                                        google.maps.event.addListener(marker, "click", function (e) {
                                            infoWindow.setContent('<div class=infowindow style="max-width:190px"> <h5><b>Liquid Waste Details:</b></h5><p><b>Liquid-Id:</b>' + data.HouseId + '</p><p><b>Name:</b>' + data.HouseOwnerName + '</p><p><b>Date:</b>' + data.date + '</p><p><b>Time:</b>' + data.time + '</p><p><b>Liquid Waste Address:</b>' + data.HouseAddress + '</p><hr><div><h5><b>Employee Details:</b></h5><p><b>Emp Name:</b>' + data.userName + '</p><p><b>Vehicle No:</b>' + data.vehcileNumber + '</p><p><b>Before Image:</b><a target="_blank" href="' + data.gpBeforImage + '"><img alt="Photo Not Found"  src=" ' + data.gpBeforImage + ' " style="height:35px;width:35px;cursor:pointer;margin-left:0px;"></img></a></p><p><b>After Image:</b><a target="_blank" href="' + data.gpAfterImage + '"><img alt="Photo Not Found"  src="' + data.gpAfterImage + '" style="height:35px;width:35px;cursor:pointer;margin-left:0px;"></img></a></p></div></div>');
                                            infoWindow.open(map, marker);

                                            //animateCircle(poly,9);
                                        });
                                    }
                                    //else if (data.DyId != null) {
                                    //    google.maps.event.addListener(marker, "click", function (e) {
                                    //        infoWindow.setContent('<div class=infowindow style="max-width:100%"> <h5><b>Dump Yard Details:</b></h5><p><b>DumpYard-Id:</b>' + data.DyId + '</p><p><b>Dump Yard Name:</b>' + data.DumpYardName + '</p><p><b>Date:</b>' + data.date + '</p><p><b>Time:</b>' + data.time + '</p><p><b>Dump Yard Address:</b>' + data.DumpAddress + '</p><p><b>Dry Waste Weight :</b>' + data.DryWaste + '</p><p><b>Wet Waste Weight :</b>' + data.WetWaste + '</p><p><b>Total Waste Weight :</b>' + data.TotWaste + '</p><p><b>Before Image:</b><a target="_blank" href="' + data.gpBeforImage + '"><img alt="Photo Not Found"  src=" ' + data.gpBeforImage + ' " style="height:35px;width:35px;cursor:pointer;margin-left:0px;"></img></a></p><p><b>After Image:</b><a target="_blank" href="' + data.gpAfterImage + '"><img alt="Photo Not Found"  src="' + data.gpAfterImage + '" style="height:35px;width:35px;cursor:pointer;margin-left:0px;"></img></a></p><hr><div><h5><b>Employee Details:</b></h5><p><b>Emp Name:</b>' + data.userName + '</p><p><b>Vehicle No:</b>' + data.vehcileNumber + '</p></div></div>');
                                    //        infoWindow.open(map, marker);

                                    //        //animateCircle(poly,9);
                                    //    });
                                    //}
                                })(marker, data);


                            }
                            //else {

                            //    (function (marker, data) {
                            //        if (data.userMobile == null) {
                            //            data.userMobile = '';
                            //        }
                            //        if (data.vehcileNumber == null) {
                            //            data.vehcileNumber = '';
                            //        }
                            //        if (data.address == null) {
                            //            data.address = '';
                            //        }
                            //        google.maps.event.addListener(marker, "click", function (e) {
                            //            infoWindow.setContent('<div class=infowindow style="max-width:190px"> <h3>' + data.userName + '</h3><h5><b>Employee Details:</b></h5><p><b>Date:</b>' + data.date + '</p><p><b>Time:</b>' + data.time + '</p><p><b>Mobile:</b>' + data.userMobile + '<p><b>Vehicle No:</b>' + data.vehcileNumber + '</p><div style="height:auto; width:150px"><p><b>Address:</b>' + data.address + '</p></div></div>');
                            //            infoWindow.open(map, marker);

                            //            //animateCircle(poly,9);
                            //        });

                            //    })(marker, data);

                            //}


                            //(function (marker, data) {

                            //    //google.maps.event.addListener(marker, "click", function (e) {
                            //    //    infoWindow.setContent('<div class=infowindow> <h3>' + data.userName + '</h3><h5><b>Details:</b></h5><p><b>Date:</b>' + data.date + '</p><p><b>Time:</b>' + data.time + '</p><p><b>Mobile:</b>' + data.userMobile + '<p><b>Vehcile No:</b>' + data.vehcileNumber + '</p><div style="height:auto; width:150px"><p><b>Address:</b>' + data.address + '</p></div></div>');
                            //    //    infoWindow.open(map, marker);


                            //    google.maps.event.addListener(marker, "click", function (e) {
                            //        infoWindow.setContent('<div class=infowindow> <h5><b>HouseDetails:</b></h5><p>House-Id:<b>' + data.HouseId + '</b></p><p>Name:<b>' + data.HouseOwnerName + '</b></p><p>MobileNo:<b>' + data.OwnerMobileNo + '</b></p><p>Date:<b>' + data.date + '</b></p><p>Time:<b>' + data.time + '</b></p><p>HouseAddress:<b>' + data.HouseAddress + '</b></p><hr><div><h5><b>EmpDetails:</b></h5><p>EmpName:<b>' + data.userName + '</b></p><p>Vehcile No:<b>' + data.vehcileNumber + '</b></p></div></div>');
                            //        infoWindow.open(map, marker);

                            //        //animateCircle(poly,9);
                            //    });

                            //})(marker, data);



                        }
                        map.setCenter(latlngbounds.getCenter());
                        map.fitBounds(latlngbounds);

                        //***********ROUTING****************//
                        var car = "M17.402,0H5.643C2.526,0,0,3.467,0,6.584v34.804c0,3.116,2.526,5.644,5.643,5.644h11.759c3.116,0,5.644-2.527,5.644-5.644 V6.584C23.044,3.467,20.518,0,17.402,0z M22.057,14.188v11.665l-2.729,0.351v-4.806L22.057,14.188z M20.625,10.773 c-1.016,3.9-2.219,8.51-2.219,8.51H4.638l-2.222-8.51C2.417,10.773,11.3,7.755,20.625,10.773z M3.748,21.713v4.492l-2.73-0.349 V14.502L3.748,21.713z M1.018,37.938V27.579l2.73,0.343v8.196L1.018,37.938z M2.575,40.882l2.218-3.336h13.771l2.219,3.336H2.575z M19.328,35.805v-7.872l2.729-0.355v10.048L19.328,35.805z";

                        var lineSymbol = {
                            path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                            scale: 5,
                            strokeColor: '#388e3c',
                        };

                        //var lineSymbol = {
                        //    path: car,
                        //    scale: .5,
                        //    strokeColor: 'black',
                        //    strokeWeight: .10,
                        //    fillOpacity: 1,
                        //    fillColor: '#ed281a',
                        //    offset: '2%',
                        //    transform: 'rotate(20 deg)',
                        //    anchor: new google.maps.Point(10, 25)
                        //};

                        //Initialize the Path Array
                        var path = new google.maps.MVCArray();

                        //Initialize the Direction Service
                        var service = new google.maps.DirectionsService();

                        //Set the Path Stroke Color
                        var poly = new google.maps.Polyline({
                            strokeColor: '#4986E7',
                            strokeWeight: 5,
                            map: map, icons: [{
                                icon: lineSymbol,
                                offset: '100%',
                            }],
                        });
                        animateCircle(poly, 1);
                        var a = 0;
                        var listener;
                        function animateCircle(line, k) {

                            // alert(k);
                            if (k == 7) {
                                clearInterval(listener);
                                a = 0;
                            }
                            else {
                                a = a + 1;

                                if (a == 1) {
                                    var count = 0;
                                    listener = window.setInterval(function () {
                                        count = (count + 1) % 200;
                                        var icons = line.get('icons');
                                        icons[0].offset = (count / 2) + '%';
                                        line.set('icons', icons);
                                        if (count == 199) { clearInterval(listener); a = 0; };
                                    }, 100);


                                }
                            }

                        }
                        //Loop and Draw Path Route between the Points on MAP
                        for (var i = 0; i < lat_lng.length; i++) {
                            if ((i + 1) <= lat_lng.length) {
                                var src = lat_lng[i];
                                var des = lat_lng[i + 1];
                                path.push(src);
                                poly.setPath(path);
                                service.route({
                                    origin: src,
                                    destination: des,
                                    travelMode: google.maps.DirectionsTravelMode.DRIVING
                                }, function (result, status) {
                                    if (status == google.maps.DirectionsStatus.OK) {
                                        for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
                                            path.push(result.routes[0].overview_path[i]);
                                        }
                                    }
                                });
                            }
                        }
                    }

                }

            });
            myMapBox();
        }

    </script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD1OiSXnPhpoH9Wy28QRlyPilQu2Fr17BM&callback=myMap" type="text/javascript"></script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD1OiSXnPhpoH9Wy28QRlyPilQu2Fr17BM&callback=myMap3" type="text/javascript"></script>

    @*<script async defer src="https://maps.googleapis.com/maps/api/js?key=@((string.IsNullOrEmpty((Session["Apikey"] ?? "").ToString()))?"AIzaSyD1OiSXnPhpoH9Wy28QRlyPilQu2Fr17BM":@Session["Apikey"].ToString())&callback=myMap" type="text/javascript"></script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=@((string.IsNullOrEmpty((Session["Apikey"] ?? "").ToString()))?"AIzaSyD1OiSXnPhpoH9Wy28QRlyPilQu2Fr17BM":@Session["Apikey"].ToString())&callback=myMap3" type="text/javascript"></script>*@

    <script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-datetimepicker/2.5.4/build/jquery.datetimepicker.full.min.js"></script>
    <script>
        /*
              Ajax GET requests.
        */
        function ajaxJQueryGetRequest() {
            alert(Math.pow(10, 9));
            var selectedURL = "http://www.wxyz.abc";
            var datePicker1 = $("#fromtime").val();
            var datePicker2 = $("#totime").val();

            alert("Date1: " + datePicker1 + "\n" +
                "Date2: " + datePicker2);

            // Check if dates are not empty
            if (datePicker1 && datePicker2) {
                var date1 = new Date(datePicker1);
                var date2 = new Date(datePicker2);

                var datesData = JSON.stringify({
                    date1: date1.toUTCString(),
                    date2: date2.toUTCString()
                });

                $.get(selectedURL, datesData).done(function (data) {
                    alert("Data Loaded: " + data);
                });
            }
        }

        $(document).ready(function () {
            $(".jquery-date-time-picker").datetimepicker({
                format: 'H:i',
                step: 15
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $("input[name$='filter']").click(function () {
                var test = $(this).val();

                $("div.desc").hide();
                $("#filter" + test).show();
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            debugger;
            var x = document.getElementById("username").innerHTML;
            var tem = x.charAt(0).toUpperCase() + x.slice(1);
            document.getElementById("demo").innerHTML = tem;
        });

    </script>
</fieldset>
<script src="~/Content/css/datepicker/js/datepicker.js"></script>


